[**
 * Module contains all additional model queries. Their names start with "e_".
 */]
[module propertiesQuery('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[comment encoding = UTF-8 /]
[**
 * Returns a Boolean if all items of the model should be included or not
 * @param anOclAny Any type.
*/]
[query public e_includeAllItems(anOclAny : ecore::EObject) : Boolean = anOclAny.getProperty('includeAllItems').trim().equalsIgnoreCase('true')/]

[**
 * Returns the name of the subset
 * @param anOclAny Any type.
*/]
[query public e_subsetName(anOclAny : ecore::EObject) : String = anOclAny.getProperty('subset.name')/]

[**
 * Returns the title of the subset
 * @param anOclAny Any type.
*/]
[query public e_subsetTitle(anOclAny : ecore::EObject) : String = anOclAny.getProperty(anOclAny.e_subsetName() + '.' + 'title')/]

[**
 * Returns a sequence of names of the subset classes
 * @param anOclAny Any type.
*/]
[query public e_subsetClasses(anOclAny : ecore::EObject) : Sequence(String) = anOclAny.getProperty(anOclAny.e_subsetName() + '.' + 'class').replaceAll('\\s', '').tokenize(',')->asSequence()/]

[**
 * Returns a sequence of names of the generalized subset classes
 * @param anOclAny Any type.
*/]
[query public e_subsetGeneralizedClasses(anOclAny : ecore::EObject) : Sequence(String) = anOclAny.getProperty(anOclAny.e_subsetName() + '.' + 'generalizedClass').replaceAll('\\s', '').tokenize(',')->asSequence()/]

[**
 * Returns a sequence of names of all subset classes
 * @param anOclAny Any type.
*/]
[query public e_subsetAllClasses(anOclAny : ecore::EObject) : Sequence(String) = anOclAny.e_subsetClasses()->union(anOclAny.e_subsetGeneralizedClasses())/]

[**
 * Returns a sequence of names of the subset data types
 * @param anOclAny Any type.
*/]
[query public e_subsetDataTypes(anOclAny : ecore::EObject) : Sequence(String) = anOclAny.getProperty(anOclAny.e_subsetName() + '.' + 'dataType').replaceAll('\\s', '').tokenize(',')->asSequence()/]

[**
 * Returns a sequence of names of the subset enumerations
 * @param anOclAny Any type.
*/]
[query public e_subsetEnumerations(anOclAny : ecore::EObject) : Sequence(String) = anOclAny.getProperty(anOclAny.e_subsetName() + '.' + 'enumeration').replaceAll('\\s', '').tokenize(',')->asSequence()/]

[**
 * Returns a sequence of names of all subset items (classes, data types, enumerations)
 * @param anOclAny Any type.
*/]
[query public e_subsetItems(anOclAny : ecore::EObject) : Sequence(String) = anOclAny.e_subsetAllClasses()->union(anOclAny.e_subsetDataTypes())->union(anOclAny.e_subsetEnumerations())/]

[**
 * Returns a sequence of names of attributes of a specific class of the subset
 * @param anOclAny Any type.
*/]
[query public e_subsetClassAttributes(aClassName : String) : Sequence(String) = aClassName.getProperty(aClassName.e_subsetName() + '.' + 'class' + '.' + aClassName).replaceAll('\\s', '').tokenize(',')->asSequence()/]

[**
 * Returns a sequence of names of attributes of a specific data type of the subset
 * @param anOclAny Any type.
*/]
[query public e_subsetDataTypeAttributes(aDataTypeName : String) : Sequence(String) = aDataTypeName.getProperty(aDataTypeName.e_subsetName() + '.' + 'dataType' + '.' + aDataTypeName).replaceAll('\\s', '').tokenize(',')->asSequence()/]

[**
 * Returns a sequence of packages relevant to the subset
 * @param anOclAny Any type.
*/]
[comment odo: using classifier can be risky because it includes associations as well/]
[query public e_subsetPackages(aModel : uml::Model) : OrderedSet(String) = aModel.eAllContents(uml::Package)->select(p | p.name = 'DDICDILibrary')->collect(temp1 | temp1.eAllContents(uml::Classifier))->collect(temp2 | temp2.qualifiedName)->select(s | aModel.e_subsetItems()->includes(s.substring(s.lastIndex('::') + 2)))->collect(s | s.substring(1, s.lastIndex('::')))->collect(temp3 | temp3.tokenize('::'))->asOrderedSet()/]

[comment 
aPackage.qualifiedName.substring( aPackage.qualifiedName.lastIndex( '::' )+2 )

OK
		->select( s : String | e_subsetAllClasses()->includes( s ) )



		->select( s : String | e_subsetAllClasses()->includes( s.substring( s.lastIndex('::') ) ) )

	aModel.eAllContents(Package).eContents(Class)
		->select( c : Class | e_subsetAllClasses()->includes(c.name) )


let usedPackages : Sequence(String)
	[for ( aPackage : Package | aModel.eAllContents(Package) ) ]
		[for ( aClass : Class | aPackage.eContents(Class)  ) 
			->select( c : Class | e_subsetAllClasses()->includes(c.name) )
			]
			usedPackages->append
		[/for]
	[/for]/]