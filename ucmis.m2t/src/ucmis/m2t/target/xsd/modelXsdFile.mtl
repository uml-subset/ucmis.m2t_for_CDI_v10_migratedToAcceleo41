[**
 * All templates in the *Xsd.mtl modules generate XML Schema.
 */]
[module modelXsdFile('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::service::utilityServices/]
[import ucmis::m2t::target::xsd::classXsd/]
[import ucmis::m2t::target::xsd::commonXsd/]
[import ucmis::m2t::target::xsd::dataTypeXsd/]
[import ucmis::m2t::target::xsd::enumerationXsd/]

[comment encoding = UTF-8 /]
[**
 * Processes an UML class model according to the the rules described in the
 * document "UML Class Interoperable Subset".
 * See {@https://ddi-alliance.bitbucket.io/DDI-CDI/DDI-CDI_Public_Review_1/} ??.
 * Creates a file for the model.
 * @param aModel a model
*/]
[template public processModelXsd(aModel : uml::Model)]
  [file (aModel.e_modelShortName() + '/encoding/xml-schema/' + aModel.e_modelAcronym().toLower() + '.xsd', overwrite, 'UTF-8')]
    [aModel.xsdHeader()/]
    [if (aModel.getProperty('DDI-CDI').equalsIgnoreCase('true'))][aModel.xsdWrapper()/][/if]
    [for (aClass : uml::Class | aModel.eAllContents(uml::Class)->sortedBy(temp1 | temp1.name)->select(temp2 | temp2.qualifiedName.contains('DDICDILibrary')))]
      [aClass.classXsd()/]
    [/for]
    [for (anEnumeration : uml::Enumeration | aModel.eAllContents(uml::Enumeration)->sortedBy(temp3 | temp3.name)->select(temp4 | temp4.qualifiedName.contains('DDICDILibrary')))]
      [anEnumeration.enumerationXsd()/]
    [/for]
    [for (aDataType : uml::DataType | aModel.eAllContents(uml::DataType)->sortedBy(temp5 | temp5.name)->select(temp6 | not temp6.oclIsTypeOf(uml::Enumeration))->select(temp7 | temp7.qualifiedName.contains('DDICDILibrary'))->select(temp8 | not temp8.qualifiedName.contains('XMLSchemaDataTypes')))]
      [aDataType.dataTypeXsd()/]
    [/for]
    [aModel.xsdFooter()/]
  [/file]
[/template]

[template public xsdHeader(aModel : uml::Model)]
  <?xml version="1.0" encoding="UTF-8"?>
  [aModel.xsdGenerationMessage()/]
  [aModel.xsdModelIdentificationComment()/]
  <xs:schema xmlns="[aModel.getProperty('DDI-CDI_XSD_NS')/]"
             xmlns:xs="http://www.w3.org/2001/XMLSchema"
             xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
             targetNamespace="[aModel.getProperty('DDI-CDI_XSD_NS')/]"
             elementFormDefault="qualified"
             attributeFormDefault="unqualified"
             version="[aModel.xsdVersion()/]"
             vc:minVersion="1.1">
    <xs:import namespace="http://www.w3.org/XML/1998/namespace"
               schemaLocation="xml.xsd"/>
    <xs:group name="AllElementsDerivedFromClasses">
      <xs:annotation>
        <xs:documentation>This group comprehends all elements which are based on classes in the UML model.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:choice minOccurs="1"
                   maxOccurs="unbounded">
  [for (aClass : uml::Class | aModel.eAllContents(uml::Class)->sortedBy(temp9 | temp9.name)->select(temp10 | temp10.qualifiedName.contains('DDICDILibrary')))]
            <xs:element ref="[aClass.name/]" minOccurs="0" maxOccurs="unbounded"/>
  [/for]
        </xs:choice>
      </xs:sequence>
    </xs:group>
    <xs:element name="[aModel.name/]"
                type="[aModel.name/]XsdType"
                xml:id="[aModel.name/]">
      <xs:annotation>
        <xs:documentation>[aModel.e_fixClassDocumentation().xsd_escapeXmlCharacter()/]</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:complexType name="[aModel.name/]XsdType"
                    xml:id="[aModel.name/]XsdType">
      <xs:annotation>
        <xs:documentation>[aModel.e_fixClassDocumentation().xsd_escapeXmlCharacter()/]</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:group ref="AllElementsDerivedFromClasses"
                  minOccurs="1"
                  maxOccurs="1">
        </xs:group>
        <xs:element ref="Wrapper" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>[/template]

[template public xsdVersion(aModel : uml::Model)]
  [aModel.e_modelIdentication().eContents(uml::Property)->select(temp11 | temp11.name = 'majorVersion')->collect(temp12 | temp12.default) + '.' + aModel.e_modelIdentication().eContents(uml::Property)->select(temp13 | temp13.name = 'minorVersion')->collect(temp14 | temp14.default)/][/template]

[template public xsdFooter(aModel : uml::Model)]
  </xs:schema>[/template]

[template public xsdGenerationMessage(anOclAny : ecore::EObject)]
  <!--
     PLEASE DO NOT EDIT THIS CODE!
     This code was generated by the Eclipse Acceleo module UCMIS M2T on [anOclAny.getCurrentTime()/].
     Target language is 'XML Schema' ('xsd') generated on the basis of the model '[anOclAny.current(uml::Model).name/]'.
  -->[/template]

[template public xsdModelIdentificationComment(aModel : uml::Model)]
  <!--
  
  XML Schema generated on the basis of the UML model [aModel.e_modelIdentication().eContents(uml::Property)->select(temp15 | temp15.name = 'acronym')->collect(temp16 | temp16.default)/].
  
  Acronym:       [aModel.e_modelIdentication().eContents(uml::Property)->select(temp17 | temp17.name = 'acronym')->collect(temp18 | temp18.default)/] 
  Title:         [aModel.e_modelIdentication().eContents(uml::Property)->select(temp19 | temp19.name = 'title')->collect(temp20 | temp20.default)/]
  Subtitle:      [aModel.e_modelIdentication().eContents(uml::Property)->select(temp21 | temp21.name = 'subtitle')->collect(temp22 | temp22.default)/]
  Major version: [aModel.e_modelIdentication().eContents(uml::Property)->select(temp23 | temp23.name = 'majorVersion')->collect(temp24 | temp24.default)/]
  Minor version: [aModel.e_modelIdentication().eContents(uml::Property)->select(temp25 | temp25.name = 'minorVersion')->collect(temp26 | temp26.default)/]
  URI:           [aModel.e_modelIdentication().eContents(uml::Property)->select(temp27 | temp27.name = 'uri')->collect(temp28 | temp28.default)/]
  
  -->[/template]

[comment used only for DDI-CDI /]
[template public xsdWrapper(aModel : uml::Model)]
    <xs:element name="Wrapper"
                type="WrapperXsdType"
                xml:id="Wrapper">
      <xs:annotation>
        <xs:documentation>Definition
              ==========
              Information structured according to the DDI-CDI model for a specific purpose or purposes within a system or community.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:complexType name="WrapperXsdType"
                    xml:id="WrapperXsdType">
      <xs:annotation>
        <xs:documentation>Definition
              ==========
              Information structured according to the DDI-CDI model for a specific purpose or purposes within a system or community.</xs:documentation>
      </xs:annotation>
      <xs:sequence>
        <xs:element name="identifier"
                    type="IdentifierXsdType"
                    minOccurs="0"
                    maxOccurs="1"
                    xml:id="Wrapper-identifier">
          <xs:annotation>
            <xs:documentation>Identifier for objects requiring short- or long-lasting referencing and management.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="supportingInformation"
                    type="ReferenceXsdType"
                    minOccurs="0"
                    maxOccurs="unbounded"
                    xml:id="Wrapper-supportingInformation">
          <xs:annotation>
            <xs:documentation>Information structured according to a non-DDI-CDI specification which is relevant to the understanding and/or processing of the content of Wrapper.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:group ref="AllElementsDerivedFromClasses"
                  minOccurs="1"
                  maxOccurs="1">
        </xs:group>
      </xs:sequence>
    </xs:complexType>[/template]