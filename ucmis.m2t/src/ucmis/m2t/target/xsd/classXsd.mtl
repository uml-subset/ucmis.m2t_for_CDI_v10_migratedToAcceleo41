[**
 * Module for generating XML Schema.
 */]
[module classXsd('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::target::xsd::commonXsd/]
[import ucmis::m2t::target::xsd::dataTypeXsd/]

[comment encoding = UTF-8 /]
[**
 * Generates XML Schema code for a class.
 * @param aClass
*/]
[template public classXsd(aClass : uml::Class)]
    <xs:element name="[aClass.name/]"
                type="[aClass.name/]XsdType"
                xml:id="[aClass.name/]">
      <!-- based on the UML class [aClass.qualifiedName/] -->
      <xs:annotation>
        <xs:documentation>[aClass.e_fixClassDocumentation().xsd_escapeXmlCharacter()/]</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:complexType name="[aClass.name/]XsdType"
                    xml:id="[aClass.name/]XsdType">
      <xs:annotation>
        <xs:documentation>[aClass.e_fixClassDocumentation().xsd_escapeXmlCharacter()/]</xs:documentation>
      </xs:annotation>
  [if (aClass.e_superClassifiers()->notEmpty())]
        <xs:complexContent>
          <xs:extension base="[aClass.e_superClassifiers()->first().name/]XsdType">
            [if (aClass.e_attributes()->notEmpty() or aClass.e_associations()->notEmpty())][aClass.propertyXsd()/][/if]
          </xs:extension>
        </xs:complexContent>
  [else]
        [if (aClass.e_attributes()->notEmpty() or aClass.e_associations()->notEmpty())][aClass.propertyXsd()/][/if]
  [/if]
    </xs:complexType>[/template]

[**
 * Generates XML Schema code for each attribute and association
 * @param aClass
*/]
[comment ith multiplicity control/]
[template public propertyXsd(aClass : uml::Class)]
  <xs:sequence>
  [for (anAttribute : uml::Property | aClass.e_attributes())]
      <xs:element name="[anAttribute.name/]"
                  type="[anAttribute.type.xsd_typeName()/]"
                  minOccurs="[anAttribute.lower/]"
                  maxOccurs="[anAttribute.xsd_upperCardinality()/]"
                  xml:id="[aClass.name.concat('-').concat(anAttribute.name)/]">
        <xs:annotation>
          <xs:documentation>[anAttribute.ownedComment->asSequence()->collect(temp1 | temp1.body)->collect(temp2 | temp2.trim())/]</xs:documentation>
        </xs:annotation>
      </xs:element>
  [/for]
  [for (aProperty : uml::Property | aClass.e_associations())]
    [let sourceClass : uml::Property = aProperty.association.ownedEnd->first()]
      [let targetClass : uml::Property = sourceClass.getOtherEnd()]
          <xs:element name="[aProperty.association.name/]"
                      minOccurs="[targetClass.lower/]"
                      maxOccurs="[targetClass.xsd_upperCardinality()/]"
                      xml:id="[aProperty.association.name/]">
            <xs:annotation>
              <xs:documentation>[aProperty.association.ownedComment->asSequence()->collect(temp3 | temp3.body)->collect(temp4 | temp4.trim())/]</xs:documentation>
            </xs:annotation>
            <xs:complexType>
              <xs:complexContent>
                <xs:restriction base="AssociationReferenceXsdType">
                  <xs:sequence>
                    <xs:element name="ddiReference"
                                type="InternationalRegistrationDataIdentifierXsdType"
                                minOccurs="0"
                                maxOccurs="1"
                                xml:id="[aProperty.association.name + '-ddiReference'/]"/>
                    <xs:element name="validType"
                                minOccurs="[sourceClass.lower/]"
                                maxOccurs="[sourceClass.xsd_upperCardinality()/]"
                                xml:id="[aProperty.association.name + '-validType'/]">
                      <xs:simpleType>
                        <xs:restriction base="xs:NMTOKEN">
                          [targetClass.type.xsd_referenceClass()/]
                        </xs:restriction>
                      </xs:simpleType>
                    </xs:element>
                  </xs:sequence>
                </xs:restriction>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
      [/let]
    [/let]
  [/for]
  </xs:sequence>[/template]