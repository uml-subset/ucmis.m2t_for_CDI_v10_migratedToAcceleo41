[**
 * Module for generating XML Schema.
 */]
[module dataTypeXsd('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::target::xsd::commonXsd/]

[comment encoding = UTF-8 /]
[**
 * Generates XML Schema code for a data type.
 * @param aClass
*/]
[template public dataTypeXsd(aDataType : uml::DataType) ? (not self.qualifiedName.contains('XMLSchemaDataTypes'))]
    <xs:element name="[aDataType.name/]"
                type="[aDataType.name/]XsdType"
                xml:id="[aDataType.name/]">
      <!-- based on the UML data type [aDataType.qualifiedName/] -->
      <xs:annotation>
        <xs:documentation>[aDataType.e_fixClassDocumentation().xsd_escapeXmlCharacter()/]</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:complexType name="[aDataType.name/]XsdType"
                    xml:id="[aDataType.name/]XsdType">
      <xs:annotation>
        <xs:documentation>[aDataType.e_fixClassDocumentation().xsd_escapeXmlCharacter()/]</xs:documentation>
      </xs:annotation>
  [if (aDataType.e_superClassifiers()->notEmpty())]
        <xs:complexContent>
          <xs:extension base="[aDataType.e_superClassifiers()->collect(temp1 | temp1.name)/]XsdType">
            [if (aDataType.e_attributes()->notEmpty())][aDataType.attributeXsd(aDataType.name)/][/if]
          </xs:extension>
        </xs:complexContent>
  [else]
        [if (aDataType.e_attributes()->notEmpty())][aDataType.attributeXsd(aDataType.name)/][/if]
  [/if]
    </xs:complexType>
  [if (aDataType.getProperty('DDI-CDI').trim().equalsIgnoreCase('true') and aDataType.name = 'Reference')]
      <xs:element name="AssociationReference"
                  type="AssociationReferenceXsdType"
                  xml:id="AssociationReference">
        <!-- related to the UML data type [aDataType.qualifiedName/] -->
        <xs:annotation>
          <xs:documentation>AssociationReference [aDataType.e_fixClassDocumentation().xsd_escapeXmlCharacter()/]</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:complexType name="AssociationReferenceXsdType"
                      xml:id="AssociationReferenceXsdType">
        <xs:annotation>
          <xs:documentation>[aDataType.e_fixClassDocumentation().xsd_escapeXmlCharacter()/]</xs:documentation>
        </xs:annotation>
            <xs:sequence>
              <xs:element name="ddiReference"
                          type="InternationalRegistrationDataIdentifierXsdType"
                          minOccurs="0"
                          maxOccurs="1"
                          xml:id="AssociationReference-ddiReference">
                <xs:annotation>
                  <xs:documentation>A DDI type reference to a DDI object.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="validType"
                          type="xs:string"
                          minOccurs="0"
                          maxOccurs="unbounded"
                          xml:id="AssociationReference-validType">
                <xs:annotation>
                  <xs:documentation>The expected type of the reference (e.g., the class or element according to the schema of the referenced resource).</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="isAssociationReference"
                          type="xs:boolean"
                          fixed="true"
                          xml:id="isAssociationReference"/>
      </xs:complexType>[/if]
[/template]

[template public dataTypeXsd(aDataType : uml::DataType) ? (self.qualifiedName.contains('XMLSchemaDataTypes'))]
    <!-- XML Schema primitive: [aDataType.name.xsd_primitive()/] -->[/template]

[comment ith multiplicity control/]
[template public attributeXsd(aDataType : uml::DataType, itemName : String)]
  <xs:sequence>
  [for (anAttribute : uml::Property | aDataType.e_attributes())]
      <xs:element name="[anAttribute.name/]"
                  type="[anAttribute.type.xsd_typeName()/]"
                  minOccurs="[anAttribute.lower/]"
                  maxOccurs="[anAttribute.xsd_upperCardinality()/]"
                  xml:id="[itemName.concat('-').concat(anAttribute.name)/]">
        <xs:annotation>
          <xs:documentation>[anAttribute.ownedComment->asSequence()->collect(temp2 | temp2.body)->collect(temp3 | temp3.trim())/]</xs:documentation>
        </xs:annotation>
      </xs:element>
  [/for]
  </xs:sequence>[/template]