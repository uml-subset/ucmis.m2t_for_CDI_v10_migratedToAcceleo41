[module classShacl('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::target::rdf::commonRdf/]
[import ucmis::m2t::target::shacl::commonShacl/]
[import ucmis::m2t::query::propertiesQuery/]

[comment encoding = UTF-8 /]
[template public classShacl(aClass : uml::Class)]
  # class [aClass.name/]
  # based on the UML class [aClass.qualifiedName/]
  [aClass.fragment()/] a sh:NodeShape;
      sh:targetClass [aClass.iri()/];
  	sh:message "See [aClass.getProperty('DDI-CDI_RDF_NS')/][aClass.name/]";
  	sh:closed true;
  	sh:ignoredProperties ( owl:sameAs );
      sh:property ['['/]
  			sh:path rdf:type;
  			sh:in ( [aClass.allSubClasses()/] ) ;
      ];
  [aClass.classPropertiesShacl()/]
  .
  
  [for (anAttribute : uml::Property | aClass.e_attributes())]
    [anAttribute.attributeShape()/]
  [/for]
  
  [for (anAssociation : uml::Association | aClass.eInverse(uml::Association)->select(anAssociation | anAssociation.source() = aClass))]
    [let sourceEnd : uml::Property = anAssociation.ownedEnd->first()]
      [let targetEnd : uml::Property = sourceEnd.getOtherEnd()]
        [anAssociation.fragment()/] a sh:PropertyShape ;
            sh:path [anAssociation.iri()/];
        	sh:node ['['/] sh:property ['['/] sh:path rdf:type; sh:minCount 1; sh:in (
              [anAssociation.targetClass().allSubClasses()/]
            ) ]];
        [if (targetEnd.lowerBound() > 0)]
              sh:minCount [targetEnd.lowerBound()/];
        [/if]
        [if (targetEnd.upperBound() > 1 - )]
              sh:maxCount [targetEnd.upperBound()/];
        [/if]
        .
        [anAssociation.fragmentRev()/] a sh:PropertyShape ;
            sh:path ['['/] sh:inversePath [anAssociation.iri()/] ];
        [if (sourceEnd.lowerBound() > 0)]
              sh:minCount [sourceEnd.lowerBound()/];
        [/if]
        [if (sourceEnd.upperBound() > 1 - )]
              sh:maxCount [sourceEnd.upperBound()/];
        [/if]
        .
      [/let]
    [/let]
  [/for]
[/template]

[template public classPropertiesShacl(aClass : uml::Class)]
      # attributes
  [for (anAttribute : uml::Property | aClass.e_attributes())]
        sh:property [anAttribute.fragment()/];
  [/for]
      # associations from [aClass.name/]
  [for (anAssociation : uml::Association | aClass.eInverse(uml::Association)->select(anAssociation | anAssociation.source() = aClass))]
        sh:property [anAssociation.fragment()/];
  [/for]
      # associations to [aClass.name/]
  [for (anAssociation : uml::Association | aClass.eInverse(uml::Association)->select(anAssociation | anAssociation.target() = aClass))]
        sh:property [anAssociation.fragmentRev()/];
  [/for]
  
  [for (sc : uml::Class | aClass.superClass)]
        # ---- superclass: [sc.name/]
    [sc.classPropertiesShacl()/]
  [/for]
  
[/template]