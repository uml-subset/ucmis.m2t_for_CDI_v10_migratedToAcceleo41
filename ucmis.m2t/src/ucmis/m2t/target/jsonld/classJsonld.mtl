[**
 * The documentation of the module modelJsonldFile.
 */]
[module classJsonld('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::service::utilityServices/]
[import ucmis::m2t::target::rdf::commonRdf/]
[import ucmis::m2t::target::jsonld::commonJsonld/]

[comment encoding = UTF-8 /]
[**
 * Generate the core of a type-scoped context for this class.
*/]
[template public classJsonldCore(aClass : uml::Class, modular : Boolean)]
  [aClass.genAttributes(modular)/]
  [for (anAssociation : uml::Association | aClass.eInverse(uml::Association)->select(anAssociation | anAssociation.source() = aClass))]
    "[anAssociation.shortName()/]": {
      "@id": "[anAssociation.iri()/]",
      "@type": "@id"[if (modular)],[/if]
    [if (modular)]
        "@context": "[anAssociation.target().name/].jsonld"
    [/if]
    },
  [/for]
  [for (anAssociation : uml::Association | aClass.eInverse(uml::Association)->select(anAssociation | anAssociation.target() = aClass))]
    "[anAssociation.shortName()/]_OF_[anAssociation.source().name/]": {
      "@reverse": "[anAssociation.iri()/]",
      "@type": "@id"[if (modular)],[/if]
    [if (modular)]
        "@context": "[anAssociation.source().name/].jsonld"
    [/if]
    },
  [/for]
  " comment ": "tag:json-should-support-trailing-commas"[/template]

[**
 * Generates a complete self-contained type-scoped context for this class,
 * as a sequence of contexts to be included in a JSON array.
*/]
[template public classJsonldSelfContained(aClass : uml::Class)]
  [if (aClass.superClass->notEmpty() and aClass.superClass->asSequence()->first().isNotInMappedItems())]
    [aClass.superClass->asSequence()->collect(temp1 | temp1.classJsonldSelfContained())/],
  [/if]
  {
    [aClass.classJsonldCore(false)/]
  }[/template]

[**
*/]
[template public classJsonldFile(aClass : uml::Class)]
  [file (aClass.getModel().e_modelShortName() + '/encoding/json-ld/' + aClass.name + '.jsonld', overwrite, 'UTF-8')]
    [aClass.classJsonldModular()/]
  [/file]
[/template]

[**
 * Generates a modular standalone context for this cmass.
 * Mostly used for the HTML documentation.
*/]
[template public classJsonldModular(aClass : uml::Class)]
  {
    "@context": ['['/]
  [if (aClass.superClass->notEmpty() and aClass.superClass->asSequence()->first().isNotInMappedItems())]
        "[aClass.superClass->asSequence()->collect(temp2 | temp2.name)/].jsonld",
  [/if]
      {
        "cdi": "[aClass.getProperty('DDI-CDI_RDF_NS')/]",
        "xsd": "http://www.w3.org/2001/XMLSchema#",
  
        [aClass.classJsonldCore(true)/]
      }
    ],
    "generatedBy": "[aClass.generationMessageJsonld()/]",
    "basedOn": "based on the UML data type [aClass.qualifiedName/]"
  }[/template]