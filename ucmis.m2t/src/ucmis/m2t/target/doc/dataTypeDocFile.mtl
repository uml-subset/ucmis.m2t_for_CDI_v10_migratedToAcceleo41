[**
 * The documentation of the module aDataTypeFile.
 */]
[module dataTypeDocFile('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::query::propertiesQuery/]
[import ucmis::m2t::target::doc::puDiagram/]
[import ucmis::m2t::target::doc::rstUtilityDoc/]
[import ucmis::m2t::target::xsd::dataTypeXsd/]
[import ucmis::m2t::target::jsonld::dataTypeJsonld/]
[import ucmis::m2t::target::onto::dataTypeOnto/]

[comment encoding = UTF-8 /]
[**
 * The documentation of the template processDataType.
 * @param aDataType - a data type
*/]
[template public processDataTypeDoc(aDataType : uml::DataType) ? (self.e_includeAllItems() or self.e_subsetDataTypes()->includes(aDataType.name))]
  [file (aDataType.e_filePath('doc').concat('.rst'), overwrite, 'UTF-8')]
    [aDataType.rst_generationMessageDoc()/]
    .. _[aDataType.qualifiedName/]:
    
    [aDataType.name.rst_header('*')/]
    
    [if (aDataType.qualifiedName.tokenize('::')->asOrderedSet()->intersection(aDataType.getProperty('ddi-cdi_packages_ignore2').substituteAll(' ', '').tokenize(',')->asOrderedSet())->size() = 0)]
      **Fully qualified [aDataType.eClass().name.toLower()/] name**: [aDataType.package.qualifiedName/]:::index:`[aDataType.name/]`
    [else]
      **Fully qualified [aDataType.eClass().name.toLower()/] name**: [aDataType.qualifiedName/]
    [/if]
    
    [if (aDataType.ownedComment->notEmpty())]
      [aDataType.e_fixClassDocumentation().replaceAll('(=\\s)', '$1\r')/]
    [else]
      *NO DOCUMENTATION AVAILABLE*
    [/if]
    
    
    [file (aDataType.e_filePath('doc').concat('.pu'), overwrite, 'UTF-8')]
      [aDataType.pu_dataTypeDiagram(0)/]
    [/file]
    .. container::
       :name: diagram
    
       .. dropdown:: Diagram
          :open:
    
          .. uml:: [aDataType.qualifiedName.replace(aDataType.getModel().name, '').replaceAll('::', '/')/].pu
    
    [if (aDataType.e_superClassifiers()->notEmpty() or aDataType.e_subClassesOrSubDataTypes()->notEmpty())]
      [aDataType.rst_classOrDataTypeInheritance()/]
    [/if]
    
    [if (aDataType.e_attributes()->notEmpty() or aDataType.e_inheritedAttributes()->notEmpty())]
      .. container::
         :name: attributes
      
         .. dropdown:: Attributes
      
            .. list-table::
               :widths: 10 10 60 10 10 10
               :header-rows: 1
               :class: datatable-attributes
      
               * - Name
                 - Inherited from
                 - Description
                 - Data Type
                 - Multiplicity
                 - Default value
      [for (p : uml::Property | aDataType.e_attributes())][p.rst_processAttributeInTable('         ', aDataType)/][/for][for (aClassifier : uml::Classifier | aDataType.e_superClassifiers())][for (p : uml::Property | aClassifier.e_attributes())][p.rst_processAttributeInTable('         ', aDataType)/][/for][/for][/if]
    
    [if (aDataType.eInverse(uml::Property)->select(temp2 | temp2.eContainer() <> aDataType)->size() > 0)]
      .. container::
         :name: usage
      
         .. dropdown:: Usage
      
            .. list-table::
               :widths: 25 25 25 25
               :header-rows: 1
               :class: datatable-usage
      
               * - Type
                 - Package
                 - Classifier
                 - Attribute
      [for (aProperty : uml::Property | aDataType.eInverse(uml::Property)->select(temp1 | temp1.eContainer() <> aDataType))]
                 * - [aProperty.eContainer().eClass().name/]
                   - [aProperty.eContainer().oclAsType(uml::Classifier).package.name/]
                   - :ref:`[aProperty.eContainer().oclAsType(uml::Classifier).qualifiedName/]`
                   - [aProperty.name/]
      [/for]
    [/if]
    
    [if (aDataType.qualifiedName.tokenize('::')->asOrderedSet()->intersection(aDataType.getProperty('ddi-cdi_packages_ignore2').substituteAll(' ', '').tokenize(',')->asOrderedSet())->size() = 0)]
      .. container::
         :name: encodings
      
         .. dropdown:: Syntax representations / encodings
      
            All syntax representations except the Canonical XMI are provided as reference points
            for specific implementations, or for use as defaults if sufficient in the form presented.
      
            .. tab-set::
      
               .. tab-item:: Canonical XMI
                  :class-content: encoding
      
                  Fragment for the data type **[aDataType.name/]** (`entire XMI model <[aDataType.getProperty('DDI-CDI_XMI_URI')/]>`_)
      
                  .. literalinclude:: /xmi/[aDataType.name/].xmi
                     :lines: 2-
                     :language: xml
                     :linenos:
                     :emphasize-lines: 4
      
      [if (aDataType.getProperty('xsd').equalsIgnoreCase('true'))]
                 .. tab-item:: XML Schema
                    :class-content: encoding
        [file (aDataType.e_filePath('doc').concat('_xsd.txt'), overwrite, 'UTF-8')]
          [aDataType.dataTypeXsd()/]
        [/file]
        
                    Fragment for the data type **[aDataType.name/]** (`entire XML Schema <[aDataType.getProperty('DDI-CDI_XSD_URI')/]>`_)
        
                    .. literalinclude:: [aDataType.qualifiedName.replace(aDataType.getModel().name, '').replaceAll('::', '/')/]_xsd.txt 
                       :language: xml
                       :linenos:
                       :emphasize-lines: 1
                       :dedent: 2
      [/if]
      
      [if (aDataType.getProperty('jsonschema').equalsIgnoreCase('true'))]
                 .. tab-item:: JSON Schema
                    :class-content: encoding
        
                    `JSON Schema </encoding/json-schema/ddi-cdi.schema.json>`_
      [/if]
      
      [if (aDataType.getProperty('onto').equalsIgnoreCase('true'))]
                 .. tab-item:: Ontology (Turtle)
                    :class-content: encoding
        [file (aDataType.e_filePath('doc').concat('.onto.ttl'), overwrite, 'UTF-8')]
          [aDataType.dataTypeOnto()/]
        [/file]
        
                    Fragment for the data type **[aDataType.name/]** (`main ontology <[aDataType.getProperty('DDI-CDI_ONTO_URI')/]>`_, `entire ontology as zip <[aDataType.getProperty('DDI-CDI_ONTO_URI') + '.zip'/]>`_)
        
                    .. literalinclude:: [aDataType.qualifiedName.replace(aDataType.getModel().name, '').replaceAll('::', '/')/].onto.ttl 
                       :language: turtle
                       :linenos:
                       :emphasize-lines: 3
      [/if]
      
      [if (aDataType.getProperty('jsonld').equalsIgnoreCase('true'))]
                 .. tab-item:: JSON-LD
                    :class-content: encoding
        [file (aDataType.e_filePath('doc').concat('.jsonld'), overwrite, 'UTF-8')]
          [aDataType.dataTypeJsonldModular()/]
        [/file]
        
                    Fragment for the data type **[aDataType.name/]** (`main JSON-LD <[aDataType.getProperty('DDI-CDI_JSONLD_URI')/]>`_ `entire JSON-LD as zip <[aDataType.getProperty('DDI-CDI_JSONLD_URI') + '.zip'/]>`_)
        
                    .. literalinclude:: [aDataType.qualifiedName.replace(aDataType.getModel().name, '').replaceAll('::', '/')/].jsonld 
                       :language: jsonld
                       :linenos:
                       :emphasize-lines: 5
      [/if]
      
      [if (aDataType.getProperty('shacl').equalsIgnoreCase('true'))]
                 .. tab-item:: SHACL
                    :class-content: encoding
        
                    `SHACL - Shapes Constraint Language </encoding/shacl/ddi-cdi.shacl.ttl>`_
      [/if]
      
      [if (aDataType.getProperty('shex').equalsIgnoreCase('true'))]
                 .. tab-item:: ShEx
                    :class-content: encoding
        
                    `ShEx - Shape Expressions </encoding/shex/ddi-cdi.shexc>`_
      [/if]
    [/if]
    
  [/file]
[/template]