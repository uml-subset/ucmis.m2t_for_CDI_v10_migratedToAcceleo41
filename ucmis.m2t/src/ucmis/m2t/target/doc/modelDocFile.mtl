[**
 * All templates in the *Doc.mtl modules generate reStructuredText for processing with Sphinx.
 */]
[module modelDocFile('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::query::propertiesQuery/]
[import ucmis::m2t::service::utilityServices/]
[import ucmis::m2t::target::doc::aboutModelDocFile/]
[import ucmis::m2t::target::doc::appendicesDocFile/]
[import ucmis::m2t::target::doc::packageDocFile/]
[import ucmis::m2t::target::doc::rstUtilityDoc/]
[import ucmis::m2t::target::doc::associationJson/]

[comment encoding = UTF-8 /]
[**
 * Processes an UML class model according to the the rules described in the
 * document "UML Class Diagram Practitioner's Subset for Data Modeling".
 * See {@https://ddi-alliance.bitbucket.io/DDI-CDI/DDI-CDI_Public_Review_1/}.
 * Creates a file for the model.
 * @param aModel a model
*/]
[template public processModelDoc(aModel : uml::Model)]
  [file (aModel.e_filePath('doc').concat('/index.rst'), overwrite, 'UTF-8')]
    [aModel.rst_generationMessageDoc()/]
    .. _[aModel.qualifiedName/]:
    
    [if (not aModel.e_includeAllItems())]
      [aModel.e_subsetTitle().rst_header('*')/]
      
      *Description of subset ...*
      
      -----
      
    [/if]
    [aModel.rst_mainIndexHead()/]
    [for (aPackage : uml::Package | aModel.e_childrenPackages()->select(p | aModel.e_includeAllItems() or aModel.getModel().e_subsetPackages()->includes(p.name)))]
         [aPackage.name.concat('/index.rst')/]
      [aPackage.processPackageDoc()/][/for]
    [if (aModel.e_includeAllItems())]
         Appendices/index.rst
    [/if]
       about/index.rst
  [/file]
  [if (aModel.e_includeAllItems())]
    [aModel.appendicesIndex()/]
  [/if]
  [aModel.aboutModel()/]
  [aModel.createDefinitionJs()/]
  [aModel.addLinksInSpecificationOverview()/]
  [aModel.createRedirectHtml()/]
  [aModel.createAssociationJsonFile()/][/template]

[template public createDefinitionJs(aModel : uml::Model)]
  [file (aModel.e_filePath('doc').concat('/definition.js'), overwrite, 'UTF-8')]
    var definition = {
    [for (aNamedElement : uml::NamedElement | aModel.e_allPackages()->collect(p | p.oclAsType(uml::NamedElement))->union(aModel.e_allClasses())->union(aModel.e_allDataTypes()))]
      	"[aNamedElement.name/]": "[aNamedElement.e_onlyDefinition().replaceAll('"', '\\\\"')/]",
    [/for]
    }
  [/file]
[/template]

[template public addLinksInSpecificationOverview(aModel : uml::Model)]
  [file (aModel.e_filePath('doc').concat('/addLinksInSpecificationOverview.sed'), overwrite, 'UTF-8')]
    [for (aNamedElement : uml::NamedElement | aModel.e_allPackages()->collect(p | p.oclAsType(uml::NamedElement))->union(aModel.eAllContents(uml::Package)->select(p | p.name = 'DDICDILibrary')->collect(temp1 | temp1.eAllContents(uml::Class)))->union(aModel.eAllContents(uml::Package)->select(p | p.name = 'DDICDILibrary')->collect(temp2 | temp2.eAllContents(uml::DataType)))->sortedBy(temp3 | temp3.name)->reverse())]
      s/ [aNamedElement.name/]s/ :ref:`[aNamedElement.name/]s\<[aNamedElement.qualifiedName/]\>`/g
      s/*[aNamedElement.name/]s/*:ref:`[aNamedElement.name/]s\<[aNamedElement.qualifiedName/]\>`/g
      s/^[aNamedElement.name/]s/:ref:`[aNamedElement.name/]s\<[aNamedElement.qualifiedName/]\>`/g
      s/ [aNamedElement.name/]/ :ref:`[aNamedElement.name/]\<[aNamedElement.qualifiedName/]\>`/g
      s/*[aNamedElement.name/]/*:ref:`[aNamedElement.name/]\<[aNamedElement.qualifiedName/]\>`/g
      s/^[aNamedElement.name/]/:ref:`[aNamedElement.name/]\<[aNamedElement.qualifiedName/]\>`/g
    [/for]
  [/file]
[/template]

[template public createRedirectHtml(aModel : uml::Model)]
  [file (aModel.e_filePath('doc').concat('/rewrite_index.html'), overwrite, 'UTF-8')]
    <!DOCTYPE html>
    <html>
    <body onload="redirect()">
    <script>
    function redirect() {
    	documentationRoot = "[aModel.getProperty('DDI-CDI_DOCUMENTATION_ROOT')/]";
    	var mappingTable = {
    [for (aNamedElement : uml::NamedElement | aModel.e_allPackages()->collect(p | p.oclAsType(uml::NamedElement))->union(aModel.e_allClasses())->union(aModel.e_allDataTypes())->select(temp4 | temp4.qualifiedName.tokenize('::')->asOrderedSet()->intersection(temp4.getProperty('ddi-cdi_packages_ignore2').substituteAll(' ', '').tokenize(',')->asOrderedSet())->size() = 0)->sortedBy(temp5 | temp5.name))]
              "[aNamedElement.name/]" : "[aNamedElement.qualifiedName.replace('DDICDIModels::', '').replaceAll('::', '/') + '.html'/]",
    [/for]
    	}
    	if (window.location.hash) {
    		var fragmentIdentifier = window.location.hash.substring(1); //Puts hash in variable, and removes the # character
    		window.location.replace(documentationRoot+mappingTable['['/]['['/]fragmentIdentifier]]);
    	} else {
    		window.location.replace(documentationRoot);
    	}
    }
    </script>
    </body>
    </html>
  [/file]
[/template]