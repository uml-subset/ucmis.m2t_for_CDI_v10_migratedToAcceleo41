[**
 * The documentation of the module textBlocks.
 */]
[module puUtilityDoc('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::service::utilityServices/]

[comment encoding = UTF-8 /]
[comment][import ucmis::m2t::target::doc::puDiagram /] [/comment]
[template public pu_options(anOcLAny : ecore::EObject)]
  ' HD display aspect ratio 16:9
  ' hyperlinkColor and pathHoverColor do not seem to work with class diagrams
  ' working approach: colors per item
  ' default font size for class names is 14
  
  hide circle
  hide empty members
  scale 0.9
  
  skinparam {
    ArrowThickness 1.5
    MinClassWidth 150
  }
  
  skinparam legend {
    BackgroundColor white
    FontSize 10
  }
  
  skinparam note {
    BackgroundColor white
  }
  
  skinparam class {
    ArrowColor #404040
    BorderColor #404040
  }
  
  skinparam package {
    FontColor lightgrey
    BorderColor lightgrey
  }[/template]

[template public X2pu_options(anOcLAny : ecore::EObject)]
  scale 0.9
  hide circle
  hide empty members
  skinparam {
    shadowing false
    minClassWidth 160
    sameClassWidth false
    legendBackgroundColor white
    ArrowThickness 1.5
  }
  skinparam class {
    ArrowColor black
    BackGroundColor [anOcLAny.getProperty('uml-diagram-class-default-color')/]
    BorderColor black
    FontColor blue
  }
  skinparam package {
    FontColor lightgrey
    BorderColor lightgrey
  }[/template]

[template public Xpu_options(indent : String)]
  [indent/]scale 0.9
  [indent/]skinparam {
  [indent/]  shadowing false
  [indent/]  minClassWidth 160
  [indent/]  sameClassWidth false
  [indent/]  legendBackgroundColor white
  [indent/]  ArrowThickness 1.5
  [indent/]}
  [indent/]skinparam class {
  [indent/]  ArrowColor black
  [indent/]  BackGroundColor [indent.getProperty('uml-diagram-class-default-color')/]
  [indent/]  BorderColor black
  [indent/]}
  [indent/]hide circle
  [indent/]hide empty members[/template]

[template public Xpu_link(url : String)]
  ['['/]['['/][url/]]][/template]

[template public pu_linkWithLabel(url : String, label : String) post(self.trim())]
  ['['/]['['/][url/] [label/]]][/template]

[template public pu_link(url : String, tooltip : String) post(self.trim())]
  ['['/]['['/][url/]{[tooltip/]}]][/template]

[comment][template public pu_link( url : String, tooltip : String ) post( trim() ) ]
['[['/][url/]{\n[tooltip/]}[']]'/]
[/template][/comment]
[template public pu_attributeLinkNew(url : String, tooltip : String) post(self.trim())]
  ['['/]['['/]['['/][url/]{[tooltip/]}]]][/template]

[comment][template public pu_attributeLinkNew( url : String, tooltip : String ) post( trim() ) ]
['[[['/][url/]{\n[tooltip/]}[']]]'/]
[/template][/comment]
[template public Xpu_link(url : String, label : String, tooltip : String)]
  ['['/]['['/][url/]{[tooltip/]} [label/]]][/template]

[template public pu_internalLink(anNamedElement : uml::NamedElement)]
  [('../' + anNamedElement.e_path() + '.html#diagram').pu_link(' <U+2015> ' + anNamedElement.name + ':\\n' + anNamedElement.e_onlyDefinition())/][/template]

[template public pu_internalLink(anAssociation : uml::Association)]
  [''.pu_link(' <U+2015> ' + anAssociation.name + ':\\n' + anAssociation.e_onlyDefinition())/][/template]

[template public pu_internalLinkType(aType : uml::Type)]
  [if (aType.ancestors()->notEmpty())]
    [('../' + aType.e_path() + '.html#diagram').pu_attributeLinkNew(' <U+2015> ' + aType.e_typeName() + ':\\n' + aType.oclAsType(uml::DataType).e_onlyDefinition())/]
  [/if]
[/template]

[template public pu_attributeLink(url : String, tooltip : String)]
  \
    ['['/]['['/]['['/][url/]{[tooltip/]}]]][/template]

[template public pu_elementWithLink(aClassifier : uml::Classifier, color : String, prefix : String) post(self.trim())]
  [aClassifier.pu_classifierNameWithLabel(color, prefix)/] [('../' + aClassifier.e_path() + '.html#super-class-hierarchy-generalization').pu_link(' <U+2015> ' + aClassifier.name + ':\\n' + aClassifier.e_onlyDefinition())/][/template]

[template public Xpu_elementWithLink(aClass : uml::Class, color : String, prefix : String) post(self.trim())]
  [aClass.pu_classifierNameWithLabel(color, prefix)/] [('../' + aClass.e_path() + '.html#super-class-hierarchy-generalization').pu_link(aClass.e_onlyDefinition())/][/template]

[template public pu_typeWithLink(aType : uml::Type) post(self.trim())]
  [if (aType.ancestors()->isEmpty())]
    	[aType.e_typeName()/]
  [else]
    	<color:blue>[aType.e_typeName()/] ['../'.concat(aType.e_path()).concat('.html#diagram').pu_attributeLink(' <U+2015> ' + aType.e_typeName() + ':\\n' + aType.oclAsType(uml::DataType).e_onlyDefinition())/]
  [/if]
[/template]

[template public Xpu_elementWithLink(aPackage : uml::Package, color : String) post(self.trim())]
  [aPackage.name/] [('../' + aPackage.e_path() + '/index.html').pu_link('Go to '.concat(aPackage.name))/][/template]

[template public Xpu_elementWithLink(aClassifier : uml::Classifier, color : String) post(self.trim())]
  [if (aClassifier.oclIsTypeOf(uml::Class))]
    [aClassifier.pu_classifierNameWithLabel(color, '')/] ['../'.concat(aClassifier.e_path()).concat('.html#super-class-hierarchy-generalization').pu_link(aClassifier.e_onlyDefinition())/]
  [elseif (aClassifier.oclIsTypeOf(uml::Package))]
    [aClassifier.name/] ['../'.concat(aClassifier.e_path()).concat('/index.html').pu_link('Go to '.concat(aClassifier.name))/]
  [/if]
[/template]

[comment 'Go to '.concat(aNamedElement.name)/]
[**
 * Returns a string with the puml class definition.
 * @param aClass A class.
 * @param aPackage Current package.
*/]
[comment][template public Xpu_elementWithLink( aClassifier : Classifier, aPackage : Package ) post (trim()) ]
[aClassifier.pu_classifierNameWithLabel()/] [pu_link('../'.
	concat(aClassifier.e_path()).
	concat('.html#diagram'),
	e_conditionalQualifiedClassName(aClassifier, aPackage),
	'\\n' + aClassifier.e_onlyDefinition()
	)
/]
[/template][/comment]
[comment 'Go to '.concat(aClass.name)/]
[template public e_conditionalQualifiedClassName(aClassifier : uml::Classifier, aPackage : uml::Package) post(self.trim())]
  [if (aPackage = aClassifier.package)]
    [aClassifier.name/]
  [else]
    [aClassifier.package.name/]::[aClassifier.name/]
  [/if]
[/template]

[template public Xe_conditionalQualifiedClassNamePuml(aClass : uml::Class, aPackage : uml::Package) post(self.trim())]
  [if (aPackage = aClass.package)]
    [aClass.name/]
  [else]
    [aClass.package.name/]_[aClass.name/] as "[aClass.name/]"
  [/if]
[/template]

[template public pu_classifierNameWithLabel(aClassifier : uml::Classifier, color : String, prefix : String) post(self.trim())]
  [aClassifier.qualifiedName/] as "[prefix/]<color:[color/]>[aClassifier.name/]"[if (aClassifier.oclIsKindOf(uml::DataType))] [aClassifier.oclAsType(uml::DataType).pu_dataTypeNotation()/][/if][/template]

[template public pu_packageNameWithLabel(aPackage : uml::Package) post(self.trim())]
  [aPackage.qualifiedName/] as "<color:lightgrey>[aPackage.name/]"[/template]

[template public pu_aggregationKind(anAggregationKind : uml::AggregationKind) post(self.trim())]
  [if (anAggregationKind.toString() = 'shared')]
    o
  [elseif (anAggregationKind.toString() = 'composite')]
    *
  [/if]
[/template]

[template public pu_generationMessageDoc(anOclAny : ecore::EObject)]
  /'
  PLEASE DO NOT EDIT THIS CODE!
   This code was generated by the Eclipse Acceleo module UCMIS M2T.
   Target language is 'Plantuml' generated on the basis of the model '[anOclAny.current(uml::Model).name/]'.
  '/
  
[/template]

[template public pu_dataTypeNotation(aDataType : uml::DataType) post(self.e_removeWhitespace())]
  [if (aDataType.oclIsTypeOf(uml::Enumeration))]
    	<<enumeration>>
  [elseif (aDataType.e_primitive())]
    	<<primitive>>
  [elseif (aDataType.oclIsTypeOf(uml::DataType))]
    	<<dataType>>
  [/if]
[/template]

[template public e_removeWhitespace(txt : String)]
  [txt.replaceAll('\\s+', '')/][/template]