[**
 * Module for generating XML Schema.
 */]
[module classJsch('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::target::jsonschema::commonJsch/]
[import ucmis::m2t::target::rdf::commonRdf/]

[comment encoding = UTF-8 /]
[**
 * Generates JSON-Schema code for a class.
 * @param aClass
*/]
[template public classJsch(aClass : uml::Class) post(self.trim())]
  "cls-[aClass.name/]": {
    "description": "[aClass.getProperty('DDI-CDI_RDF_NS')/][aClass.name/]",
    "type": "object",
    "properties": {
      "@context": {
        "$ref": "#/defs/at-context"
      },
      "@id": {
        "type": "string",
        "format": "iri-reference"
      },
      "@type": {
        "const": "[aClass.name/]"
      },
      [aClass.genClassAttributes()/]
      [aClass.genAssociations(OrderedSet{})/]
      [aClass.genReverseAssociations()/]
      "sameAs": {
        "$ref": "#/defs/owl:sameAs"
      }
    },
    "required": ['['/][aClass.requiredClassAttributes()/][aClass.requiredAssociations()/]"@type"],
    "additionalProperties": false
  },
  "target-[aClass.name/]": {
    "description": "all subclasses of [aClass.getProperty('DDI-CDI_RDF_NS')/][aClass.name/]",
    "anyOf": ['['/]
      { "$ref": "#/defs/cls-[aClass.name/]" },
  [for (sc : uml::Class | aClass.e_subClasses())]
        { "$ref": "#/defs/cls-[sc.name/]" },
  [/for]
      { "type": "string", "format": "iri-reference" }
    ]
  },[/template]

[template protected genClassAttributes(aClass : uml::Class) post(self.trim())]
  [aClass.genAttributes()/]
  [if (not aClass.superClass->isEmpty())]
    [aClass.superClass->asSequence()->collect(temp1 | temp1.genClassAttributes())/]
  [/if]
[/template]

[**
 * Generate the "properties" entries for all associations of aClass and its superclass.
 * In order to prevent duplicate keys, 'seen' is expected to contain all the keys already used.
 * This is useful when a subclass specializes the constrains on an inherited association.
*/]
[template protected genAssociations(aClass : uml::Class, seen : OrderedSet(String)) post(self.trim())]
  [let associations : OrderedSet(uml::Association) = aClass.eInverse(uml::Association)->select(a | a.source() = aClass)]
    [for (anAssociation : uml::Association | associations->select(anAssociation | seen->excludes(anAssociation.name)))]
      [let sourceEnd : uml::Property = anAssociation.ownedEnd->first()]
        [let targetEnd : uml::Property = sourceEnd.getOtherEnd()]
          "[anAssociation.shortName()/]": {
            "description": "[anAssociation.name/]",
            "$comment": "cardinality [targetEnd.lowerBound()/]..[targetEnd.upperBound()/]",
          [if (targetEnd.upperBound() = 1)]
               "$ref": "#/defs/target-[anAssociation.targetClass().name/]"
          [else]
              "anyOf": ['['/]
                {
                  "$ref": "#/defs/target-[anAssociation.targetClass().name/]"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/defs/target-[anAssociation.targetClass().name/]"
                  }
                }
              ]
          [/if]
          },
        [/let]
      [/let]
    [/for]
    [if (not aClass.superClass->isEmpty())]
      [aClass.superClass->asSequence()->collect(temp2 | temp2.genAssociations(seen + associations->asSequence()->collect(a | a.shortName())))/]
    [/if]
  [/let]
[/template]

[template protected genReverseAssociations(aClass : uml::Class) post(self.trim())]
  [for (anAssociation : uml::Association | aClass.eInverse(uml::Association)->select(anAssociation | anAssociation.target() = aClass))]
    [let sourceEnd : uml::Property = anAssociation.ownedEnd->first()]
      "[anAssociation.shortName()/]_OF_[anAssociation.source().name/]": {
        "description": "[anAssociation.name/]",
        "$comment": "cardinality [sourceEnd.lowerBound()/]..[sourceEnd.upperBound()/]",
      [if (sourceEnd.upperBound() = 1)]
          "$ref": "#/defs/target-[anAssociation.sourceClass().name/]"
      [else]
          "anyOf": ['['/]
            {
              "$ref": "#/defs/target-[anAssociation.sourceClass().name/]"
            },
            {
              "type": "array",
              "items": {
                "$ref": "#/defs/target-[anAssociation.sourceClass().name/]"
              }
            }
          ]
      [/if]
      },
    [/let]
  [/for]
  [if (not aClass.superClass->isEmpty())]
    [aClass.superClass->asSequence()->collect(temp3 | temp3.genReverseAssociations())/]
  [/if]
[/template]

[**
 * List-items of the names of the required attributes
*/]
[template public requiredClassAttributes(aClass : uml::Class) post(self.trim())]
  [aClass.requiredAttributes()/][if (not aClass.superClass->isEmpty())][aClass.superClass->asSequence()->collect(temp4 | temp4.requiredClassAttributes())/][/if][/template]

[**
 * List-items of the names of the required associations
*/]
[template public requiredAssociations(aClass : uml::Class) post(self.trim())]
  [for (anAssociation : uml::Association | aClass.eInverse(uml::Association)->select(anAssociation | anAssociation.source() = aClass))][let sourceEnd : uml::Property = anAssociation.ownedEnd->first()][let targetEnd : uml::Property = sourceEnd.getOtherEnd()][if (targetEnd.lowerBound() > 0)]"[anAssociation.shortName()/]", [/if][/let][/let][/for][if (not aClass.superClass->isEmpty())]
                                                                                                                                                                                                                                                                                                                                                           [aClass.superClass->asSequence()->collect(temp5 | temp5.requiredAssociations())/]
                                                                                                                                                                                                                                                                                                                                                         [/if]
[/template]