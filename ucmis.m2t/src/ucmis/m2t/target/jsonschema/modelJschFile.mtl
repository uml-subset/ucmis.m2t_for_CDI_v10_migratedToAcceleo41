[**
 * All templates in the *Jsch.mtl modules generate JSON Schema.
 */]
[module modelJschFile('http://www.eclipse.org/uml2/5.0.0/Types', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')/]

[import ucmis::m2t::query::modelQuery/]
[import ucmis::m2t::service::utilityServices/]
[import ucmis::m2t::target::jsonschema::classJsch/]
[import ucmis::m2t::target::jsonschema::commonJsch/]
[import ucmis::m2t::target::jsonschema::dataTypeJsch/]
[import ucmis::m2t::target::jsonschema::enumerationJsch/]
[import ucmis::m2t::target::rdf::commonRdf/]

[comment encoding = UTF-8 /]
[**
 * This generator creates a JSON-Schema file corresponding to the JSON-LD file.
 * @param aModel a model
*/]
[template public generateJsonSchema(aModel : uml::Model)]
  [file (aModel.e_modelShortName() + '/encoding/json-schema/' + aModel.e_modelAcronym().toLower() + '.schema.json', overwrite, 'UTF-8')]
    {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "[aModel.current(uml::Model).name/]",
      "description": "This code was generated by the Eclipse Acceleo module UCMIS M2T on [aModel.getCurrentTime()/].",
      "version": "[aModel.jschVersion()/]",
    
      "if": { "type": "object" },
      "then": { "anyOf": ['['/]
        { "$ref": "#/defs/root-object" },
        { "$ref": "#/defs/root-graph" }
      ]},
      "else": { "$ref": "#/defs/root-array" },
    
      "defs": {
        "root-object": {
          "type": "object",
          "required": ['['/]"@type"],
          "anyOf": [aModel.arrayClassSchemas()/]
        },
        "root-array": {
          "type": "array",
          "items": { "$ref": "#/defs/root-object" }
        },
        "root-graph": {
          "type": "object",
          "required": ['['/]"[aModel.current(uml::Model).name/]"],
          "properties": {
            "[aModel.current(uml::Model).name/]": { "$ref": "#/defs/root-array" }
          }
        },
    [for (aClass : uml::Class | aModel.eAllContents(uml::Class)->sortedBy(temp1 | temp1.name)->select(temp2 | temp2.qualifiedName.contains('DDICDILibrary')))]
          [aClass.classJsch()/]
    [/for]
    [for (anEnumeration : uml::Enumeration | aModel.eAllContents(uml::Enumeration)->sortedBy(temp3 | temp3.name)->select(temp4 | temp4.qualifiedName.contains('DDICDILibrary')))]
          [anEnumeration.enumerationJsch()/]
    [/for]
    [for (aDataType : uml::DataType | aModel.eAllContents(uml::DataType)->select(aDataType | aDataType.isComplex() and aDataType.isInAllowedCdiPackage() and aDataType.isNotInMappedItems()))]
          [aDataType.dataTypeJsch()/]
    [/for]
        "xsd:string": {
          "type": "string"
        },
        "xsd:boolean": {
          "type": "boolean"
        },
        "xsd:integer": {
          "type": "integer"
        },
        "xsd:double": {
          "type": "number"
        },
        "xsd:nonNegativeInteger": {
          "type": "integer",
          "minumum": 0
        },
        "xsd:anyURI": {
          "type": "string",
          "format": "uri-reference"
        },
        "xsd:date": {
          "type": "string",
          "format": "date"
        },
        "xsd:language": {
          "type": "string",
          "pattern": "^a-zA-Z]+(-['['/]a-zA-Z]+)*$"
        },
        "rdf:langString": {
          "type": "object",
          "properties": {
            "@value": { "type": "string" },
            "@type": { "type": "string", "format": "iri-reference" }
           },
           "required": ['['/]"@value", "@type"]
        },
        "owl:sameAs": {
          "anyOf": ['['/]
            {
              "type": "string",
              "format": "iri-reference"
            },
            {
              "type": "object"
            }
          ]
        },
        "at-context": {
          "anyOf": ['['/]
            {
              "type": "string",
              "format": "iri-reference"
            },
            {
              "type": "array",
              "items": {
                "anyOf": ['['/]
                  {
                    "type": "string",
                    "format": "iri-reference"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            }
          ]
        }
      }
    }
  [/file]
[/template]

[template public jschVersion(aModel : uml::Model)]
  [aModel.e_modelIdentication().eContents(uml::Property)->select(temp5 | temp5.name = 'majorVersion')->collect(temp6 | temp6.default) + '.' + aModel.e_modelIdentication().eContents(uml::Property)->select(temp7 | temp7.name = 'minorVersion')->collect(temp8 | temp8.default)/][/template]